import pandas as pd
import websocket
import json
import time
import requests
from datetime import datetime, timedelta
import threading
import logging

# 配置日志
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IndexTrader:
    def __init__(self):
        self.units_left = 100  # 初始单位数
        self.status = "S"      # 初始状态
        self.current_price = 0.0
        self.historical_data = None
        self.trading_start_time = None
        self.trading_end_time = None
        self.price_history = []
        self.ws = None
        self.lock = threading.Lock()
        
    def load_historical_data(self, csv_path="hsi.csv"):
        """加载历史数据"""
        try:
            self.historical_data = pd.read_csv(csv_path)
            # 确保数据类型正确
            self.historical_data['current'] = pd.to_numeric(self.historical_data['current'], errors='coerce')
            self.historical_data['time'] = pd.to_datetime(self.historical_data['time'], format='%H:%M:%S', errors='coerce')
            logger.info(f"成功加载历史数据，共 {len(self.historical_data)} 条记录")
            
            # 仅分析交易状态(T)的数据
            trading_data = self.historical_data[self.historical_data['status'] == 'T']
            if not trading_data.empty:
                self.analyze_historical_patterns(trading_data)
            else:
                logger.warning("历史数据中没有交易状态(T)的记录")
        except Exception as e:
            logger.error(f"加载历史数据失败: {e}")
    
    def analyze_historical_patterns(self, trading_data):
        """分析历史数据模式，寻找最佳交易时机"""
        logger.info("分析历史交易模式...")
        
        # 计算价格变化率
        trading_data['price_change'] = trading_data['current'].pct_change()
        
        # 计算移动平均线
        trading_data['ma5'] = trading_data['current'].rolling(window=5).mean()
        
        # 计算波动率
        trading_data['volatility'] = trading_data['current'].rolling(window=10).std()
        
        # 分析最佳卖出时机（例如：价格高于5周期移动平均且波动率较低的时候）
        self.best_selling_conditions = {
            'price_above_ma': True,  # 价格高于移动平均
            'low_volatility': 0.002,  # 波动率阈值
            'positive_momentum': 0.001  # 正向动量阈值
        }
        
        logger.info("历史模式分析完成，已设置交易条件")
    
    def connect_to_websocket(self):
        """连接到WebSocket API"""
        ws_url = "V1/hsidist/stream/websocket"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                with self.lock:
                    self.current_price = float(data.get("current", 0))
                    new_status = data.get("status")
                    
                    # 状态变化处理
                    if new_status != self.status:
                        if new_status == "T" and self.status == "S":
                            self.trading_start_time = datetime.now()
                            self.trading_end_time = self.trading_start_time + timedelta(minutes=10)
                            logger.info(f"交易开始! 当前价格: {self.current_price}")
                            # 启动交易策略
                            threading.Thread(target=self.execute_trading_strategy).start()
                        elif new_status == "S" and self.status == "T":
                            logger.info("交易时间结束")
                    
                    self.status = new_status
                    self.price_history.append((datetime.now(), self.current_price, self.status))
                    
                    logger.info(f"收到市场数据: 价格={self.current_price}, 状态={self.status}")
            except Exception as e:
                logger.error(f"处理WebSocket消息时出错: {e}")
        
        def on_error(ws, error):
            logger.error(f"WebSocket错误: {error}")
        
        def on_close(ws, close_status_code, close_msg):
            logger.info("WebSocket连接关闭")
        
        def on_open(ws):
            logger.info("WebSocket连接已建立")
        
        self.ws = websocket.WebSocketApp(ws_url,
                                         on_message=on_message,
                                         on_error=on_error,
                                         on_close=on_close,
                                         on_open=on_open)
        
        # 在单独的线程中运行WebSocket
        wst = threading.Thread(target=self.ws.run_forever)
        wst.daemon = True
        wst.start()
        logger.info("WebSocket客户端已启动")
    
    def should_sell(self, units):
        """根据当前市场状况决定是否应该卖出"""
        if len(self.price_history) < 10:
            return False
        
        # 提取最近的价格数据
        recent_prices = [price for _, price, status in self.price_history[-10:] if status == "T"]
        if not recent_prices:
            return False
        
        # 计算简单的技术指标
        current = self.current_price
        ma5 = sum(recent_prices[-5:]) / min(5, len(recent_prices[-5:]))
        
        # 计算价格变化率
        if len(recent_prices) >= 2:
            price_change = (recent_prices[-1] - recent_prices[-2]) / recent_prices[-2]
        else:
            price_change = 0
        
        # 计算波动率 (简化版)
        if len(recent_prices) >= 5:
            volatility = pd.Series(recent_prices[-5:]).std() / pd.Series(recent_prices[-5:]).mean()
        else:
            volatility = 0
        
        # 决策逻辑
        # 1. 价格高于移动平均线
        condition1 = current > ma5 if self.best_selling_conditions['price_above_ma'] else True
        
        # 2. 波动率低于阈值
        condition2 = volatility < self.best_selling_conditions['low_volatility']
        
        # 3. 价格有正向动量
        condition3 = price_change > self.best_selling_conditions['positive_momentum']
        
        # 4. 时间因素：随着交易窗口接近结束，降低卖出标准
        time_remaining = (self.trading_end_time - datetime.now()).total_seconds() / 60 if self.trading_end_time else 10
        time_pressure = max(0, 1 - (time_remaining / 10))  # 0到1之间的值，表示时间压力
        
        # 根据剩余时间调整卖出单位数
        if time_pressure > 0.8 and self.units_left > 20:
            # 时间快结束了，需要加速卖出
            logger.info(f"时间压力大 ({time_pressure:.2f})，考虑加速卖出")
            return True
        
        # 综合决策
        should_sell_decision = condition1 and condition2 and condition3
        
        logger.info(f"交易决策分析: 价格={current}, MA5={ma5:.2f}, 波动率={volatility:.4f}, "
                   f"价格变化率={price_change:.4f}, 时间压力={time_pressure:.2f}, 决策={should_sell_decision}")
        
        return should_sell_decision
    
    def sell_units(self, units_to_sell):
        """调用API卖出指定单位数"""
        if units_to_sell <= 0 or self.units_left <= 0:
            return False
        
        units_to_sell = min(units_to_sell, self.units_left)
        
        try:
            api_url = "V1/xxx"
            payload = {"unit": units_to_sell}
            response = requests.post(api_url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    self.units_left -= units_to_sell
                    logger.info(f"成功卖出 {units_to_sell} 单位，剩余 {self.units_left} 单位，价格: {self.current_price}")
                    return True
                else:
                    logger.error(f"卖出API返回错误: {result}")
            else:
                logger.error(f"卖出API请求失败，状态码: {response.status_code}")
        except Exception as e:
            logger.error(f"调用卖出API时出错: {e}")
        
        return False
    
    def execute_trading_strategy(self):
        """执行交易策略"""
        logger.info("开始执行交易策略")
        
        # 初始分配计划：将100单位分成几部分
        # 策略：前期少量试探性卖出，中期根据市场情况灵活卖出，后期确保全部卖出
        initial_plan = [
            (0.2, 10),    # 交易时间的前20%，卖出10单位
            (0.5, 30),    # 交易时间的中间30%，卖出30单位
            (0.8, 40),    # 交易时间的后30%，卖出40单位
            (1.0, 20)     # 交易时间的最后20%，卖出剩余单位
        ]
        
        last_check_time = datetime.now()
        check_interval = 5  # 每5秒检查一次市场状况
        
        while self.status == "T" and self.units_left > 0:
            current_time = datetime.now()
            
            # 检查是否到了交易结束时间
            if self.trading_end_time and current_time >= self.trading_end_time:
                # 交易时间结束，卖出所有剩余单位
                if self.units_left > 0:
                    logger.info(f"交易时间即将结束，卖出所有剩余 {self.units_left} 单位")
                    self.sell_units(self.units_left)
                break
            
            # 每隔一段时间检查一次
            if (current_time - last_check_time).total_seconds() >= check_interval:
                last_check_time = current_time
                
                # 计算交易进度（0到1之间）
                if self.trading_start_time and self.trading_end_time:
                    progress = min(1.0, (current_time - self.trading_start_time).total_seconds() / 
                                  (self.trading_end_time - self.trading_start_time).total_seconds())
                else:
                    progress = 0.5  # 如果没有明确的开始/结束时间，假设在中间
                
                # 根据交易进度和初始计划决定卖出单位数
                target_units_sold = 0
                for threshold, units in initial_plan:
                    if progress <= threshold:
                        target_units_sold += units
                        break
                    target_units_sold += units
                
                target_units_sold = min(100, target_units_sold)
                units_should_have_sold = 100 - target_units_sold
                
                # 如果我们落后于计划，考虑卖出更多
                if self.units_left > units_should_have_sold:
                    units_behind = self.units_left - units_should_have_sold
                    logger.info(f"当前进度: {progress:.2f}, 应该已卖出: {100-units_should_have_sold}, 实际已卖出: {100-self.units_left}, 落后: {units_behind}")
                    
                    # 决定卖出多少单位
                    if self.should_sell(units_behind):
                        # 根据市场状况决定卖出单位数
                        if progress < 0.3:
                            # 交易初期，谨慎卖出
                            units_to_sell = min(5, units_behind)
                        elif progress < 0.7:
                            # 交易中期，适度卖出
                            units_to_sell = min(10, units_behind)
                        else:
                            # 交易后期，积极卖出
                            units_to_sell = min(20, units_behind, self.units_left)
                        
                        self.sell_units(units_to_sell)
                
                # 即使不落后于计划，也可能是好的卖出时机
                elif self.should_sell(5) and self.units_left > 0:
                    units_to_sell = min(5, self.units_left)
                    logger.info(f"检测到良好的卖出时机，卖出 {units_to_sell} 单位")
                    self.sell_units(units_to_sell)
            
            # 短暂休眠以避免过度CPU使用
            time.sleep(1)
        
        logger.info(f"交易策略执行完毕，剩余单位: {self.units_left}")
    
    def run(self):
        """运行交易程序"""
        logger.info("启动交易程序...")
        self.load_historical_data()
        self.connect_to_websocket()
        
        try:
            # 保持主线程运行
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("程序被用户中断")
        finally:
            if self.ws:
                self.ws.close()
            logger.info(f"程序结束，最终剩余单位: {self.units_left}")

if __name__ == "__main__":
    trader = IndexTrader()
    trader.run()
